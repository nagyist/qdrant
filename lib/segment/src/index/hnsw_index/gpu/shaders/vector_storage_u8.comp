#ifndef VECTOR_STORAGE_U8_HEADER
#define VECTOR_STORAGE_U8_HEADER

#define VECTOR_STORAGE_ELEMENT_TYPE u8vec4

#ifdef COSINE_DISTANCE

uint vector1Len = 0;
uint vector2Len = 0;

float dot_u8vec4(u8vec4 a, u8vec4 b) {
    uint sum = uint(a.x) * uint(b.x) + uint(a.y) * uint(b.y) + uint(a.z) * uint(b.z) + uint(a.w) * uint(b.w);
    vector1Len += uint(a.x) * uint(a.x) + uint(a.y) * uint(a.y) + uint(a.z) * uint(a.z) + uint(a.w) * uint(a.w);
    vector2Len += uint(b.x) * uint(b.x) + uint(b.y) * uint(b.y) + uint(b.z) * uint(b.z) + uint(b.w) * uint(b.w);
    return float(sum);
}

#define VECTOR_STORAGE_SCORE_ELEMENT(a, b) dot_u8vec4(a, b)

#define VECTOR_STORAGE_POSTPROCESS_SCORE(RESULT) \
    float len1 = subgroupAdd(float(vector1Len)); \
    float len2 = subgroupAdd(float(vector2Len)); \
    if (len1 > 0 && len2 > 0) { \
        RESULT = subgroupAdd(RESULT) / sqrt(len1 * len2); \
    } else { \
        RESULT = 0; \
    }

#define VECTOR_STORAGE_PREPROCESS() \
    vector1Len = 0; \
    vector2Len = 0;

#endif

#ifdef DOT_DISTANCE

float dot_u8vec4(u8vec4 a, u8vec4 b) {
    uint sum = uint(a.x) * uint(b.x) + uint(a.y) * uint(b.y) + uint(a.z) * uint(b.z) + uint(a.w) * uint(b.w);
    return float(sum);
}

#define VECTOR_STORAGE_SCORE_ELEMENT(a, b) dot_u8vec4(a, b)

#define VECTOR_STORAGE_POSTPROCESS_SCORE(RESULT) \
    RESULT = subgroupAdd(RESULT);

#define VECTOR_STORAGE_PREPROCESS()

#endif

#ifdef EUCLID_DISTANCE

float euclid_u8vec4(u8vec4 v1, u8vec4 v2) {
    ivec4 v = ivec4(v1) - ivec4(v2);
    int sum = -v.x * v.x - v.y * v.y - v.z * v.z - v.w * v.w;
    return float(sum);
}
#define VECTOR_STORAGE_SCORE_ELEMENT(a, b) euclid_u8vec4(a, b)
#define VECTOR_STORAGE_POSTPROCESS_SCORE(RESULT) RESULT = subgroupAdd(RESULT);
#define VECTOR_STORAGE_PREPROCESS()

#endif

#ifdef MANHATTAN_DISTANCE
float manhattan_u8vec4(u8vec4 v1, u8vec4 v2) {
    ivec4 v = abs(ivec4(v1) - ivec4(v2));
    int sum = -v.x - v.y - v.z - v.w;
    return float(sum);
}

#define VECTOR_STORAGE_SCORE_ELEMENT(a, b) manhattan_u8vec4(a, b)
#define VECTOR_STORAGE_POSTPROCESS_SCORE(RESULT) RESULT = subgroupAdd(RESULT);
#define VECTOR_STORAGE_PREPROCESS()

#endif

#endif
